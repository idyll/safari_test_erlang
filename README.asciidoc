= H2 Push Bug Proof of Concept

== Based on the Secure hello world example

This example code is used for debugging issues with HTTP/2 Push.

To try this example, you need GNU `make` and `git` in your PATH.

To build and run the example, use the following command:

[source,bash]
$ make run

Then point your browser to https://localhost:8443

Chrome will not use server push to get "app.css" and curl reports an error.

It does appear to work correctly with nghttp

== curl example output

[source,bash]
----
$ curl -kv https://localhost:8443
* Rebuilt URL to: https://localhost:8443/
*   Trying ::1...
* TCP_NODELAY set
* Connection failed
* connect to ::1 port 8443 failed: Connection refused
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/cert.pem
  CApath: none
* TLSv1.2 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
* TLSv1.2 (IN), TLS handshake, Server finished (14):
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
* TLSv1.2 (OUT), TLS change cipher, Client hello (1):
* TLSv1.2 (OUT), TLS handshake, Finished (20):
* TLSv1.2 (IN), TLS change cipher, Client hello (1):
* TLSv1.2 (IN), TLS handshake, Finished (20):
* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384
* ALPN, server accepted to use h2
* Server certificate:
*  subject: C=US; ST=Texas; O=Nine Nines; OU=Cowboy; CN=localhost
*  start date: Feb 28 05:23:34 2013 GMT
*  expire date: Feb 23 05:23:34 2033 GMT
*  issuer: C=US; ST=Texas; O=Nine Nines; OU=Cowboy; CN=ROOT CA
*  SSL certificate verify result: self signed certificate in certificate chain (19), continuing anyway.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
* Using Stream ID: 1 (easy handle 0x7f8ba380a400)
> GET / HTTP/2
> Host: localhost:8443
> User-Agent: curl/7.54.0
> Accept: */*
>
* Connection state changed (MAX_CONCURRENT_STREAMS updated)!
* Closing connection 0
* TLSv1.2 (OUT), TLS alert, Client hello (1):
curl: (16) Error in the HTTP2 framing layer

----

== NGHTTP example output

[source,bash]
----
$ nghttp -v https://localhost:8443
[ERROR] Could not connect to the address ::1
Trying next address 127.0.0.1
[  0.012] Connected
[WARNING] Certificate verification failed: self signed certificate in certificate chain
The negotiated protocol: h2
[  0.019] recv SETTINGS frame <length=0, flags=0x00, stream_id=0>
          (niv=0)
[  0.019] send SETTINGS frame <length=12, flags=0x00, stream_id=0>
          (niv=2)
          [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]
          [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]
[  0.019] send SETTINGS frame <length=0, flags=0x01, stream_id=0>
          ; ACK
          (niv=0)
[  0.019] send PRIORITY frame <length=5, flags=0x00, stream_id=3>
          (dep_stream_id=0, weight=201, exclusive=0)
[  0.019] send PRIORITY frame <length=5, flags=0x00, stream_id=5>
          (dep_stream_id=0, weight=101, exclusive=0)
[  0.019] send PRIORITY frame <length=5, flags=0x00, stream_id=7>
          (dep_stream_id=0, weight=1, exclusive=0)
[  0.019] send PRIORITY frame <length=5, flags=0x00, stream_id=9>
          (dep_stream_id=7, weight=1, exclusive=0)
[  0.019] send PRIORITY frame <length=5, flags=0x00, stream_id=11>
          (dep_stream_id=3, weight=1, exclusive=0)
[  0.020] send HEADERS frame <length=38, flags=0x25, stream_id=13>
          ; END_STREAM | END_HEADERS | PRIORITY
          (padlen=0, dep_stream_id=11, weight=16, exclusive=0)
          ; Open new stream
          :method: GET
          :path: /
          :scheme: https
          :authority: localhost:8443
          accept: */*
          accept-encoding: gzip, deflate
          user-agent: nghttp2/1.28.0
[  0.020] recv SETTINGS frame <length=0, flags=0x01, stream_id=0>
          ; ACK
          (niv=0)
[  0.021] recv (stream_id=13) :authority: localhost:8443
[  0.021] recv (stream_id=13) :method: GET
[  0.021] recv (stream_id=13) :path: /app.css
[  0.021] recv (stream_id=13) :scheme: https
[  0.021] recv (stream_id=13) accept: text/css
[  0.021] recv PUSH_PROMISE frame <length=34, flags=0x04, stream_id=13>
          ; END_HEADERS
          (padlen=0, promised_stream_id=2)
[  0.021] recv (stream_id=13) :status: 200
[  0.021] recv (stream_id=13) content-length: 443
[  0.021] recv (stream_id=13) content-type: text/html
[  0.021] recv (stream_id=13) date: Mon, 07 May 2018 02:15:17 GMT
[  0.021] recv (stream_id=13) server: Cowboy
[  0.021] recv HEADERS frame <length=46, flags=0x04, stream_id=13>
          ; END_HEADERS
          (padlen=0)
          ; First response header
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Hello Snowday!</title>
    <link rel="stylesheet" href="./app.css")">
  </head>
	<body>
	  <p>
      This is a sample web page.
    </p>
	</body>
</html
	[  0.022] recv DATA frame <length=443, flags=0x01, stream_id=13>
          ; END_STREAM
[  0.022] recv (stream_id=2) :status: 200
[  0.022] recv (stream_id=2) content-length: 86
[  0.022] recv (stream_id=2) content-type: text/css
[  0.022] recv (stream_id=2) date: Mon, 07 May 2018 02:15:17 GMT
[  0.022] recv (stream_id=2) server: Cowboy
[  0.022] recv HEADERS frame <length=15, flags=0x04, stream_id=2>
          ; END_HEADERS
          (padlen=0)
          ; First push response header
body{
      color: green;
      background-color: pink;
      font-size: 24px;
    }
	[  0.029] recv DATA frame <length=86, flags=0x01, stream_id=2>
          ; END_STREAM
[  0.029] send GOAWAY frame <length=8, flags=0x00, stream_id=0>
          (last_stream_id=2, error_code=NO_ERROR(0x00), opaque_data(0)=[])
----
